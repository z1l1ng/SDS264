---
title: "Data types"
format:
  html: default
editor_options: 
  chunk_output_type: console
---

You can download this .qmd file from [here](https://github.com/proback/264_fall_2024/blob/main/06_data_types.qmd).  Just hit the Download Raw File button.

This leans on parts of [R4DS Chapter 27: A field guide to base R](https://r4ds.hadley.nz/base-r), in addition to parts of the first edition of R4DS.

```{r}
#| message: false
#| warning: false

# Initial packages required
library(tidyverse)
```


## What is a vector?

We've seen them:

```{r}
1:5 
c(3, 6, 1, 7)
c("a", "b", "c")
x <- c(0:3, NA)
is.na(x)
sqrt(x)
```

This doesn't really fit the mathematical definition of a vector (direction and magnitude)... its really just some numbers (or letters, or TRUE's...) strung together.

## Types of vectors

**Atomic vectors** are homogeneous... they can contain only one "type". 
Types include logical, integer, double, and character (Also complex and raw, but we will ignore those).

**Lists** can be heterogeneous.... they can be made up of vectors of different types, or even of other lists!

**NULL** denotes the absence of a vector (whereas NA denotes absence of a value in a vector).


Let's check out some vector types:

```{r}
x <- c(0:3, NA)
typeof(x)

sqrt(x)
typeof(sqrt(x))
```


**[Pause to Ponder:]** State the types of the following vectors, then use `typeof()` to check:

```{r}
is.na(x)
x > 2
c("apple", "banana", "pear")
```


A logical vector can be implicitly coerced to numeric - T to 1 and F to 0

```{r}
x <- sample(1:20, 100, replace = TRUE)
y <- x > 10
is_logical(y)
as.numeric(y)
sum(y)  # how many are greater than 10?
mean(y) # what proportion are greater than 10?
```


If there are multiple data types in a vector, then the most complex type wins, because you cannot mix types in a vector (although you can in a list)

```{r}
typeof(c(TRUE, 1L))
typeof(c(1L, 1.5))
typeof(c(1.5, "a"))
```

Integers are whole numbers. "double" refers to "Double-precision" representation of fractional values... don't worry about the details here (Google it if you care), but just recognize that computers have to round at some point. "Double-precision" tries to store numbers precisely and efficiently. 

But weird stuff can happen:

```{r}
y <- sqrt(2) ^2
y
y == 2
```

the function `near` is better here:

```{r}
near(y, 2)
```

And doubles have a couple extra possible values: Inf, -Inf, and NaN, in addition to NA:

```{r}
1/0
-1/0
0/0
Inf*0
Inf/Inf
Inf/NA
Inf*NA
```

It's not a good idea to check for special values (NA, NaN, Inf, -Inf) with ==. 
Use these instead:

```{r}
is.finite(Inf)
is.infinite(Inf)

is.finite(NA)
is.finite(NaN)
is.infinite(NA)
is.infinite(NaN)

is.na(NA)
is.na(NaN)
is.nan(NA)
is.nan(NaN)
is.na(Inf)
is.nan(Inf)
```

Why not use == ? 

```{r}
# Sometimes it works how you think it would:
1/0
1/0 == Inf

# Sometimes it doesn't (Because NA is contagious!)
0/0
0/0 == NaN    
NA == NA 


x <- c(0, 1, 1/0, 0/0)
# Doesn't work well
x == NA
x == Inf
# Works better
is.na(x)
is.infinite(x)
```

Another note: technically, each type of vector has its own type of NA... this usually doesn't matter, but is good to know in case one day you get very very strange errors.


## Augmented vectors

Vectors may carry additional metadata in the form of *attributes* which create *augmented vectors*. 

- Factors are built on top of integer vectors

- Dates and date-times are built on top of numeric (either integer or double) vectors

- Data frames and tibbles are built on top of lists


## Naming items in vectors

Each element of a vector can be named, either when it is created or with `setnames` from package purrr.

```{r}
x <- c(a = 1, b = 2, c = 3)
x
```

This is more commonly used when you're dealing with lists or tibbles (which are just a special kind of list!) 

```{r}
tibble(x = 1:4, y = 5:8)
```


## Subsetting vectors

So many ways to do this. 

I. Subset with numbers.

Use positive integers to keep elements at those positions:

```{r}
x <- c("one", "two", "three", "four", "five")
x[1]
x[4]
x[1:2]
```

**[Pause to Ponder:]** How would you extract values 1 and 3?


You can also repeat values:

```{r}
x[c(1, 1, 3, 3, 5, 5, 2, 2, 4, 4, 4)]
```

Use negative integers to drop elements:

```{r}
x[-3]
```

**[Pause to Ponder:]** How would you drop values 2 and 4?


What happens if you mix positive and negative values?

```{r}
#| error: TRUE

x[c(1, -1)]
```

You can just subset with 0... this isn't usually helpful, except perhaps for testing weird cases when you write functions:

```{r}
x[0]
```

II. Subset with a logical vector ("Logical subsetting"). 

```{r}
x == "one"

x[x == "one"]

y <- c(10, 3, NA, 5, 8, 1, NA)
is.na(y)
y[!is.na(y)]
```

**[Pause to Ponder:]** Extract values of y that are less than or equal to 5 (what happens to NAs?).  Then extract all non-missing values of y that are less than or equal to 5


III. If named, subset with a character vector.

```{r}
z <- c(abc = 1, def = 2, xyz = 3)
z["abc"]

# A slightly more useful example:
summary(y)
summary(y)["Min."]
```

**[Pause to Ponder:]** Extract abc and xyz from the vector z, and then extract the mean from summary(y)


Note: Using $ is just for lists (and tibbles, since tibbles are lists)! 
Not atomic vectors!

```{r}
#| error: TRUE

z$abc
```


IV. Blank space. (Don't subset).

```{r}
x
x[]
```

This seems kind of silly. But blank is useful for higher-dimensional objects... like a matrix, or data frame. But our book doesn't use matrices, so this may be the last one you see this semester:

```{r}
z <- matrix(1:8, nrow= 2)
z
z[1, ]
z[, 1]
z[, -3]
```

We could use this with tibbles too, but it is generally better to use the column names (more readable, and less likely to get the wrong columns by accident), and you should probably use `select`, `filter`, or  `slice`:

```{r}
mpg[, 1:2]
mpg[1:3, ]
```


## Recycling

What does R do with vectors:

```{r}
1:5 + 1:5
1:5 * 1:5
1:5 + 2
1:5 * 2
```

This last two lines makes sense... but R is doing something important here, called **recycling**.  In other words, it is really doing this:

```{r}
1:5 * c(2, 2, 2, 2, 2)
```

You never need to do this explicit iteration! (This is different from some other more general purpose computing languages.... R was built for analyzing data, so this type of behavior is really desirable!)

R can recycle longer vectors too, and only warns you if lengths are not multiples of each other:

```{r}
1:10 + 1:2
1:10 + 1:3
```

However, functions within the tidyverse will not allow you to recycle anything other than *scalars* (math word for single number... in R, a vector of length 1). 

```{r}
#| error: TRUE

#OK:
tibble(x = 1:4, y = 1)

#not OK:
tibble(x = 1:4, y = 1:2)
```

To intentionally recycle, use `rep`:

```{r}
rep(1:3, times = 2)
rep(1:3, each = 2)
```


## Lists

Lists can contain a mix of objects, even other lists.

As noted previously, tibbles are an *augmented list.* Augmented lists have additional attributes. For example, the names of the columns in a tibble.

Another list you may have encountered in a stats class is output from `lm`, linear regression:

```{r}
mpg_model <- lm(hwy ~ cty, data = mpg)

mpg_model
typeof(mpg_model)
str(mpg_model)
```

There are three ways to extract from a list.  Check out the pepper shaker analogy in Section 27.3.3 (note: shaker = list)

  - [] returns new, smaller list (fewer pepper packs in shaker)
  - [[]] drills down one level (individual pepper packs not in shaker)


I. [ to extract a sub-list. The result is a list.

```{r}
mpg_model[1]
typeof(mpg_model[1])
```

you can also do this by name, rather than number:

```{r}
mpg_model["coefficients"]
```


II. [[ extracts a single component from the list... It removes a level of hierarchy

```{r}
mpg_model[[1]]
typeof(mpg_model[[1]])
```

Again, it can be done by name instead:

```{r}
mpg_model[["coefficients"]]
```

III. $ is a shorthand way of extracting elements by name... it is similar to [[ in that it removes a level of hierarchy. You don't need quotes. (We've seen this with tibbles before too!)

```{r}
mpg_model$coefficients
```

## str

The `str` function allows us to see the structure of a list, as well as any attributes.

```{r}
mpg
str(mpg)

mpg_model
str(mpg_model)
```

As you can see, the mpg_model is a very complicated list with lots of attributes. The elements of the list can be all different types. 


The last attribute is the object **class**, which it lists as lm.

```{r}
class(mpg_model)
```


Now let's see how extracting from a list works with a tibble (since a tibble is built on top of a list).

```{r}
ugly_data <- tibble(
  truefalse = c("TRUE", "FALSE", "NA"),
  numbers = c("1", "2", "3"),
  dates = c("2010-01-01", "1979-10-14", "2013-08-17"),
  more_numbers = c("1", "231", ".")
)
ugly_data
str(ugly_data)   # we've seen str before... stands for "structure"

pretty_data <- ugly_data %>% 
  mutate(truefalse = parse_logical(truefalse),
         numbers = parse_number(numbers),
         dates = parse_date(dates),
         more_numbers = parse_number(more_numbers))
pretty_data
str(pretty_data)


# Get a smaller tibble
pretty_data[1]
class(pretty_data[1])
typeof(pretty_data[1])

pretty_data[2:3]
pretty_data[1, 3:4]
pretty_data["dates"]
pretty_data[c("dates", "more_numbers")]
pretty_data %>% select(dates, more_numbers) 
pretty_data %>% select(dates, more_numbers) %>% slice(1:2) 


# Remove a level of hierarchy - drill down one level to get a new object
pretty_data$dates
class(pretty_data$dates)
typeof(pretty_data$dates)

pretty_data[[1]]
class(pretty_data[[1]])
typeof(pretty_data[[1]])
```

**[Pause to Ponder:]** Predict what these lines will produce BEFORE running them:

```{r}
#| error: TRUE

pretty_data[[c("dates", "more_numbers")]] #Line #1
pretty_data[[2]][[3]] #Line #2
pretty_data[[2]][3] #Line #3
pretty_data[[2]][c(TRUE, FALSE, TRUE)] #Line #4
pretty_data[[1]][c(1, 2, 1, 2)] #Line #5
```

>> Line #1 we get an error message, Line #2 we will get the second column (numbers) (as a vector of numbers) and 3rd value, Line #3 we will get the second column (as a vector of numbers) and the number 3 again but it is still in list form. For Line #4 we will get the second column (as a vector of numbers) with 1 and 3 because we are taking the first value and the third value. For Line #5 [c(1, 2, 1, 2)] is a vector of positions so we get the first, and the second and the first and the second, since the order is TRUE, FALSE, NA.

## Generic functions

Another important feature of R is *generic functions.* Some functions, like `plot` and `summary` for example, behave very differently depending on the class of their input. 

```{r}
class(mpg)
summary(mpg)

class(mpg_model)
summary(mpg_model)
```


As a simpler case, consider the `mean` function.

```{r}
mean
```

As a generic function, we can see what methods are available:

```{r}
methods(mean)
```


```{r}
mean(c(20, 21, 23))
library(lubridate)
date_test <- ymd(c("2020-03-20", "2020-03-21", "2020-03-23"))
mean(date_test)
```

## What makes Tibbles special?

Tibbles are lists that:
 - have `names` attributes (column/variable names) as well as `row.names` attributes.
 - have elements that are all vectors of the same length

```{r}
attributes(mpg)
```


## On Your Own

1. The dataset `roster` includes 24 names (the first 24 alphabetically on this list of names). Let's suppose this is our class, and you want to divide students into 6 groups. Modify the code below using the `rep` function to create groups in two different ways. 

```{r}
#| eval: FALSE

babynames <- read_csv("https://proback.github.io/264_fall_2024/Data/babynames_2000.csv")

roster <- babynames %>%
  sample_n(size = 24) %>%
  select(name) 

roster %>%
  mutate(group_method1 = , 
         group_method2 = )
```


2. Here's is a really crazy list that tells you some stuff about data science.

```{r}
data_sci <- list(first = c("first it must work", "then it can be" , "pretty"),
                 DRY = c("Do not", "Repeat", "Yourself"),
                 dont_forget = c("garbage", "in", "out"),
                 our_first_tibble = mpg,
                 integers = 1:25,
                 doubles = sqrt(1:25),
                 tidyverse = c(pack1 = "ggplot2", pack2 = "dplyr", 
                               pack3 = "lubridate", etc = "and more!"),
                 opinion = list("MSCS 264 is",  "awesome!", "amazing!", "rainbows!")
                  )
```


Use str to learn about data_sci. 
```{r}

```

Now, figure out how to get **exactly** the following outputs. Bonus points if you can do it more than one way!


[1] "first it must work" "then it can be"     "pretty" 
```{r}

```


$DRY
[1] "Do not"   "Repeat"   "Yourself"
```{r}

```


[1] 3 1 4 1 5 9 3
```{r}

```


      pack1         etc 
  "ggplot2" "and more!" 
```{r}

```


[1] "rainbows!"
```{r}

```


[1] "garbage" "in"      "garbage" "out"   
```{r}

```


# A tibble: 234 x 2
     hwy   cty
   <int> <int>
 1    29    18
 2    29    21
 3    31    20
 4    30    21
 5    26    16
 6    26    18
 7    27    18
 8    26    18
 9    25    16
10    28    20
# … with 224 more rows
```{r}

```


[[1]]
[1] "MSCS 264 is"

[[2]]
[1] "amazing!"      
```{r}

```

